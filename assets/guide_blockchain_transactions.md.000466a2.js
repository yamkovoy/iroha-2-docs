import{_ as s,o as a,c as n,V as o}from"./chunks/framework.7726510e.js";const h=JSON.parse('{"title":"Transactions","description":"","frontmatter":{},"headers":[],"relativePath":"guide/blockchain/transactions.md","lastUpdated":1692001131000}'),e={name:"guide/blockchain/transactions.md"},t=o(`<h1 id="transactions" tabindex="-1">Transactions <a class="header-anchor" href="#transactions" aria-label="Permalink to &quot;Transactions&quot;">â€‹</a></h1><p>A <strong>transaction</strong> is a collection of <a href="./instructions.html">instructions</a>. The instructions within a transaction can be executed in a sequence or compiled into a <a href="./wasm.html">WASM blob</a>.</p><p>All interactions in the blockchain are done via transactions.</p><p>Here is an example of creating a new transaction with the <code>Grant</code> instruction. In this transaction, Mouse is granting Alice the specified role (<code>role_id</code>). Check <a href="./permissions.html#register-a-new-role">the full example</a>.</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> grant_role </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">GrantBox</span><span style="color:#F47067;">::</span><span style="color:#DCBDFB;">new</span><span style="color:#ADBAC7;">(role_id, alice_id);</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> grant_role_tx </span><span style="color:#F47067;">=</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">Transaction</span><span style="color:#F47067;">::</span><span style="color:#DCBDFB;">new</span><span style="color:#ADBAC7;">(mouse_id, </span><span style="color:#DCBDFB;">vec!</span><span style="color:#ADBAC7;">[grant_role</span><span style="color:#F47067;">.</span><span style="color:#DCBDFB;">into</span><span style="color:#ADBAC7;">()]</span><span style="color:#F47067;">.</span><span style="color:#DCBDFB;">into</span><span style="color:#ADBAC7;">(), </span><span style="color:#6CB6FF;">100_000</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">.</span><span style="color:#DCBDFB;">sign</span><span style="color:#ADBAC7;">(mouse_key_pair)</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">;</span></span></code></pre></div>`,5),l=[t];function r(c,p,i,d,_,y){return a(),n("div",null,l)}const B=s(e,[["render",r]]);export{h as __pageData,B as default};
