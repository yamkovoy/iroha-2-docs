import{_ as e,o as a,c as s,V as o}from"./chunks/framework.7726510e.js";const g=JSON.parse('{"title":"Public Key Cryptography","description":"","frontmatter":{},"headers":[],"relativePath":"guide/configure/keys.md","lastUpdated":1692001131000}'),n={name:"guide/configure/keys.md"},t=o(`<h1 id="public-key-cryptography" tabindex="-1">Public Key Cryptography <a class="header-anchor" href="#public-key-cryptography" aria-label="Permalink to &quot;Public Key Cryptography&quot;">​</a></h1><p>It&#39;s OK to feel worried about public key cryptography. This is a complex topic that requires a lot of care and attention. To work with Iroha you <em>do</em> need to have a basic understanding of how it works, so we provided you with a brief primer.</p><p>Firstly, public and private keys come in pairs. For a given private key it&#39;s easy to figure out the corresponding public key, but the opposite is not true. The fact that it&#39;s practically impossible to figure out the private key for a given public key is why they&#39;re called <em>public</em> and <em>private</em>: <strong>the public one is safe to share without compromising the security of the entire exchange</strong>.</p><p>With a private key, you can encrypt information in such a way that only the people who have your public key can read it. You cannot encrypt anything with a public key.</p><p>When you encrypt data with a private key, you <em>sign</em> it. When something is <em>signed</em>, everyone can read it, and everyone with your public key can verify that the person who wrote that message used your private key.</p><h2 id="key-generation-with-kagami" tabindex="-1">Key Generation with Kagami <a class="header-anchor" href="#key-generation-with-kagami" aria-label="Permalink to &quot;Key Generation with Kagami&quot;">​</a></h2><p>You can use one of Iroha&#39;s tools, <code>kagami</code>, to generate key pairs. To create a new key pair, run:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cargo</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--bin</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">kagami</span><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">--</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">crypto</span></span></code></pre></div><p>Use the <code>-a</code> flag to specify the algorithm for key-pair generation and the <code>-s</code> flag to specify the seed. For example, to generate a <code>secp256k1</code> key pair, run:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cargo</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--bin</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">kagami</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">crypto</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--algorithm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">secp256k1</span></span></code></pre></div><p>The output will look like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#adbac7;">Public key (multihash): e701210250a46ea6e1688d1ac64fa653eb6220ea21591eb8cb850695c64b04d95853d527</span></span>
<span class="line"><span style="color:#adbac7;">Private key: d46c33e69e0bd21de8cb969eb395bdf0d86c6727d73db917436508e42963bc74</span></span>
<span class="line"><span style="color:#adbac7;">Digest function: secp256k1</span></span></code></pre></div><details class="details custom-block"><summary>Working with Kagami</summary><p>Since there is currently no <code>kagami</code> package available, if you want to copy the program somewhere convenient e.g. <code>/bin</code> for system-wide use, you need to build it first:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cargo</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">build</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--bin</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">kagami</span></span></code></pre></div><p>To move the <code>kagami</code> executable to the system&#39;s bin directory, making it globally available, type:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">sudo</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">mv</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">kagami</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">/bin</span></span></code></pre></div><p>You can also move <code>kagami</code> to your user&#39;s <code>.local/bin</code> directory, so it would only be available in your user&#39;s shell session:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">mv</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">target/debug/kagami</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">~/.local/bin</span></span></code></pre></div><p>If you want to use <code>kagami</code> from your user&#39;s directory, make sure that <code>~/.local/bin</code> directory is available in your shell&#39;s <code>.rc</code> file, be it <code>~/.bashrc</code> for <a href="https://www.gnu.org/software/bash/" target="_blank" rel="noreferrer">Bash</a> or <code>~/.zshrc</code> for the <a href="https://www.zsh.org/" target="_blank" rel="noreferrer">Z shell</a>.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#768390;"># Check kagami is available</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">whereis</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">kagami</span></span>
<span class="line"><span style="color:#F69D50;">kagami:</span></span></code></pre></div><p>Fix the PATH variable for <a href="https://www.gnu.org/software/bash/" target="_blank" rel="noreferrer">Bash</a> and reload the <code>.bashrc</code> script:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">echo</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;export PATH=&#39;\${HOME}/.local/bin:\${PATH}&#39;&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&gt;&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">~/.bashrc</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">source</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">~/.bashrc</span></span></code></pre></div><p>Fix the <code>PATH</code> variable for the <a href="https://www.zsh.org/" target="_blank" rel="noreferrer">Z shell</a> and reload the <code>.zshrc</code> script:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">echo</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;export PATH=&#39;\${HOME}/.local/bin:\${PATH}&#39;&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&gt;&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">~/.zshrc</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">source</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">~/.zshrc</span></span></code></pre></div><p>Fix the <code>PATH</code> variable for the Fish permanently:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">fish_add_path</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">~/.local/bin</span></span></code></pre></div></details><p>Check <a href="https://github.com/hyperledger/iroha/tree/iroha2-dev/tools/kagami#crypto" target="_blank" rel="noreferrer"><code>kagami</code> documentation</a> for more details.</p><h2 id="keys-for-deploying-a-network" tabindex="-1">Keys for Deploying a Network <a class="header-anchor" href="#keys-for-deploying-a-network" aria-label="Permalink to &quot;Keys for Deploying a Network&quot;">​</a></h2><p>Keeping in mind what we said above about key cryptography, note that if you&#39;re deploying your own network, you should change the keys in all three configuration files:</p><ul><li>peer configuration: <a href="./peer-configuration.html"><code>configs/peer/config.json</code></a></li><li>client configuration: <a href="./client-configuration.html"><code>configs/client_cli/config.json </code></a></li><li>genesis block: <a href="./genesis.html"><code>configs/peer/genesis.json</code></a></li></ul><h3 id="_1-generate-new-key-pairs" tabindex="-1">1. Generate new key-pairs <a class="header-anchor" href="#_1-generate-new-key-pairs" aria-label="Permalink to &quot;1. Generate new key-pairs&quot;">​</a></h3><p>To get new key-pairs, use the <code>iroha_crypto_cli</code> program:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cargo</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">build</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-p</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">iroha_crypto_cli</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">./target/debug/iroha_crypto_cli</span></span></code></pre></div><p>This will print a fresh pair of keys.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can also use <code>kagami</code> to generate the pair of keys:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cargo</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--bin</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">kagami</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">crypto</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--json</span></span></code></pre></div><p>Check <a href="https://github.com/hyperledger/iroha/tree/iroha2-dev/tools/kagami#crypto" target="_blank" rel="noreferrer"><code>kagami</code> documentation</a> for more details.</p></div><p>If you&#39;re planning on using the <code>private_key</code> in a programming language, it should be noted that both the <code>payload</code> of the <code>private_key</code> and the string representation of the <code>public_key</code> are in hexadecimal. Keys are commonly encoded using ASCII characters instead.</p><h3 id="_2-update-keys-for-each-peer" tabindex="-1">2. Update keys for each peer <a class="header-anchor" href="#_2-update-keys-for-each-peer" aria-label="Permalink to &quot;2. Update keys for each peer&quot;">​</a></h3><p>If you want to set up your own network, you should change the keys for all your peers: in <code>peer/config.json</code> change <code>PUBLIC_KEY</code> and <code>PRIVATE_KEY</code> to the fresh pair. When you&#39;ve done that, you should add the keys to the <code>TRUSTED_PEERS</code> array in the same configuration file. Every peer that wants to connect to the given peer from the outside must know its <code>PRIVATE_KEY</code> specified in the <code>TRUSTED_PEERS</code> section.</p><p>Let&#39;s consider an example of a minimum viable <a href="/iroha-2-docs/guide/glossary.html#byzantine-fault-tolerance-bft">BFT</a> network. In this network you have four peers, so that means that you need to create <em>four</em> different peer configuration files (<code>config.json</code>).</p><p>Each peer should have its own <code>PUBLIC_KEY</code> and <code>PRIVATE_KEY</code>. You should add all four public keys to the <code>TRUSTED_PEERS</code> array, including the peer that you&#39;re configuring. The same <code>TRUSTED_PEERS</code> array must be copied across all four configuration files.</p><p>Next, you must make sure that the peers agree on the <code>GENESIS_ACCOUNT</code> key pairs.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Don&#39;t worry about the fact that the private key for the genesis account is known to all peers. The genesis account loses all privileges after the first block gets committed.</p></div><h3 id="_3-register-a-non-genesis-account" tabindex="-1">3. Register a non-genesis account <a class="header-anchor" href="#_3-register-a-non-genesis-account" aria-label="Permalink to &quot;3. Register a non-genesis account&quot;">​</a></h3><p>Finally, while the first client <em>could</em> use the genesis account to register new users, it&#39;s not a great idea for private networks. You should, instead, register a non-genesis account (for example, <em>alice</em>@wonderland) and <code>unregister</code> the genesis account.</p><div class="warning custom-block"><p class="custom-block-title">NB</p><p><code>iroha_client_cli</code> currently doesn&#39;t support unregister instructions. If you plan on creating a private blockchain, you should consider writing your own client based on the <code>client</code> Rust crate, or any of the provided client libraries: <a href="https://github.com/hyperledger/iroha-python" target="_blank" rel="noreferrer">iroha-python</a>, <a href="https://github.com/hyperledger/iroha-ios" target="_blank" rel="noreferrer">iroha-iOS</a>, <a href="https://github.com/hyperledger/iroha-java" target="_blank" rel="noreferrer">iroha-java</a>, or <a href="https://github.com/hyperledger/iroha-javascript/tree/iroha2" target="_blank" rel="noreferrer">iroha-javascript</a>.</p></div><h2 id="keys-on-the-client-side" tabindex="-1">Keys on the Client Side <a class="header-anchor" href="#keys-on-the-client-side" aria-label="Permalink to &quot;Keys on the Client Side&quot;">​</a></h2><p>Let&#39;s talk about how keys are used in the client.</p><p>Every transaction is signed on behalf of some user, thus every operation requires a key. That doesn&#39;t mean that you need to explicitly provide a key every time.</p><p>For example, you need to have a user to register a user (just like you need scissors to cut off the tag from a pair of new scissors). But in order to register a user, you must also provide a new public key, so that the network can verify that it&#39;s that trustworthy <em>mad_hatter</em>@wonderland, and not some impostor (possibly sent by the <em>red_queen</em>), so there are cases where you need to provide a key explicitly.</p><p>Each time <code>iroha_client_cli</code> asks you to provide a <code>--key</code> argument, it&#39;s probably a good idea to generate a new key-pair.</p>`,37),r=[t];function l(p,c,i,d,y,h){return a(),s("div",null,r)}const b=e(n,[["render",l]]);export{g as __pageData,b as default};
