import{_ as s,o as n,c as a,V as l}from"./chunks/framework.7726510e.js";const p="/iroha-2-docs/assets/sample-vue-app.4caffed6.gif",F=JSON.parse('{"title":"JavaScript/TypeScript Guide","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javascript.md","lastUpdated":1692001131000}'),o={name:"guide/javascript.md"},e=l(`<h1 id="javascript-typescript-guide" tabindex="-1">JavaScript/TypeScript Guide <a class="header-anchor" href="#javascript-typescript-guide" aria-label="Permalink to &quot;JavaScript/TypeScript Guide&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This guide targets <code>@iroha2/client</code> and <code>@iroha/data-model</code> version <strong><code>^5.0</code></strong>, which targets Iroha 2 stable (<code>2.0.0-pre-rc.13</code>, <code>c4af68c4f7959b154eb5380aa93c894e2e63fe4e</code>).</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This guide assumes you are familiar with Node.js and NPM ecosystem.</p></div><h2 id="_1-client-installation" tabindex="-1">1. Client Installation <a class="header-anchor" href="#_1-client-installation" aria-label="Permalink to &quot;1. Client Installation&quot;">​</a></h2><p>The Iroha 2 JavaScript library consists of multiple packages:</p><table><thead><tr><th>Package</th><th>Description</th></tr></thead><tbody><tr><td><code>client</code></td><td>Submits requests to Iroha Peer</td></tr><tr><td><code>data-model</code></td><td>Provides <a href="https://github.com/paritytech/parity-scale-codec" target="_blank" rel="noreferrer">SCALE</a> (Simple Concatenated Aggregate Little-Endian)-codecs for the Iroha 2 Data Model</td></tr><tr><td><code>crypto-core</code></td><td>Contains cryptography types</td></tr><tr><td><code>crypto-target-node</code></td><td>Provides compiled crypto WASM (<a href="https://webassembly.org/" target="_blank" rel="noreferrer">Web Assembly</a>) for the Node.js environment</td></tr><tr><td><code>crypto-target-web</code></td><td>Provides compiled crypto WASM for native Web (ESM)</td></tr><tr><td><code class="whitespace-pre">crypto-target-bundler</code></td><td>Provides compiled crypto WASM to use with bundlers such as Webpack</td></tr></tbody></table><p>All of these are published under the <code>@iroha2</code> scope into Iroha Nexus Registry. In the future, they will be published in the main NPM Registry.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can also work with the sources in Iroha Javascript repository, where the active development is happening. Clone the repository and check out the <code>iroha2</code> branch:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">git</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">clone</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">https://github.com/hyperledger/iroha-javascript.git</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--branch</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">iroha2</span></span></code></pre></div><p>Please note that this guide does not cover the details of this workflow.</p></div><p>While we&#39;ve taken great care to decouple the packages, so you could minimise their footprint, for the purposes of this tutorial, it&#39;s better to install everything.</p><p>The installation consists of two steps: setting up a registry and then installing the packages you need.</p><ol><li><p>Set up a registry. In shell, run:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">echo</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;@iroha2:registry=https://nexus.iroha.tech/repository/npm-group/&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">.npmrc</span></span></code></pre></div></li><li><p>Install Iroha 2 packages as any other NPM package. If you are following the tutorial, we recommend installing all of the following:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">npm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">@iroha2/client</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">npm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">@iroha2/data-model</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">npm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">@iroha2/crypto-core</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">npm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">@iroha2/crypto-target-node</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">npm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">@iroha2/crypto-target-web</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">npm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">@iroha2/crypto-target-bundler</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note that you can use other package managers, such as <a href="https://yarnpkg.com" target="_blank" rel="noreferrer">yarn</a> or <a href="https://pnpm.io" target="_blank" rel="noreferrer">pnpm</a>, for a faster installation. For example:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">yarn</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">add</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">@iroha2/data-model</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">pnpm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">add</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">@iroha2/crypto-target-web</span></span></code></pre></div></div><p>The set of packages that you need to install depends on what you are trying to achieve. If you only need to play with the Data Model to perform (de-)serialisation, the <code>data-model</code> package is sufficient. If you need to check on a peer in terms of its status or health, then you only need the client library.</p></li><li><p>Install the following packages as well:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">npm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">hada</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">npm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">tsx</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-g</span></span></code></pre></div></li><li><p>If you are planning to use the Transaction or Query API, you&#39;ll also need to inject an appropriate <code>crypto</code> instance into the client at runtime. This has to be adjusted according to your particular environment.</p><p>For example, Node.js users need the following:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { crypto } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/crypto-target-node&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { setCrypto } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB;">setCrypto</span><span style="color:#ADBAC7;">(crypto)</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Please refer to the documentation of the respective <code>@iroha2/crypto-target-*</code> package, because each case has specific configuration steps. For example, the <code>web</code> target needs to be initialised (via asynchronous <code>init()</code>) before you can use any cryptographic methods.</p></div></li></ol><div class="info custom-block"><p class="custom-block-title">NOTE</p><p>When you are creating files in the following steps, you must place them in the same directory that contains <code>node_modules</code>, like so:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#adbac7;">╭───┬───────────────────┬──────╮</span></span>
<span class="line"><span style="color:#adbac7;">│ # │       name        │ type │</span></span>
<span class="line"><span style="color:#adbac7;">├───┼───────────────────┼──────┤</span></span>
<span class="line"><span style="color:#adbac7;">│ 0 │ node_modules      │ dir  │</span></span>
<span class="line"><span style="color:#adbac7;">│ 1 │ addClient.ts      │ file │</span></span>
<span class="line"><span style="color:#adbac7;">│ 2 │ example.ts        │ file │</span></span>
<span class="line"><span style="color:#adbac7;">│ 3 │ package.json      │ file │</span></span>
<span class="line"><span style="color:#adbac7;">│ 4 │ pnpm-lock.yaml    │ file │</span></span>
<span class="line"><span style="color:#adbac7;">│ 5 │ registerDomain.ts │ file │</span></span>
<span class="line"><span style="color:#adbac7;">╰───┴───────────────────┴──────╯</span></span></code></pre></div><p>We recommend using <a href="https://www.npmjs.com/package/tsx" target="_blank" rel="noreferrer"><code>tsx</code></a> to run the scripts you&#39;ve created. For example:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">tsx</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">example.ts</span></span></code></pre></div></div><h2 id="_2-client-configuration" tabindex="-1">2. Client Configuration <a class="header-anchor" href="#_2-client-configuration" aria-label="Permalink to &quot;2. Client Configuration&quot;">​</a></h2><p>The JavaScript Client is fairly low-level in a sense that it doesn&#39;t expose any convenience features like a <code>TransactionBuilder</code> or a <code>ConfigBuilder</code>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The work on implementing those is underway, and these features will very likely be available in the second round of this tutorial&#39;s release.</p></div><p>Thus, on the plus side, configuration of the client is simple. On the downside, you have to prepare a lot manually.</p><p>You may need to use transactions or queries, so before we initialize the client, let&#39;s set up this part. Let&#39;s assume that you have stringified public &amp; private keys (more on that later). Thus, a key-pair generation could look like this:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { crypto } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/crypto-target-node&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">keyPair</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> crypto.KeyPair.</span><span style="color:#DCBDFB;">fromJSON</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  public_key: </span><span style="color:#96D0FF;">&#39;ed0120e555d194e8822da35ac541ce9eec8b45058f4d294d9426ef97ba92698766f7d3&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  private_key: {</span></span>
<span class="line"><span style="color:#ADBAC7;">    digest_function: </span><span style="color:#96D0FF;">&#39;ed25519&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    payload:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#96D0FF;">&#39;de757bcb79f4c63e8fa0795edc26f86dfdba189b846e903d0b732bb644607720e555d194e8822da35ac541ce9eec8b45058f4d294d9426ef97ba92698766f7d3&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span></code></pre></div><p>When you have a key pair, you might create a <code>Signer</code> using the key pair:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { cryptoTypes } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/crypto-core&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { Signer } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { AccountId, DomainId } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// Key pair from previous step</span></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">keyPair</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">cryptoTypes</span><span style="color:#ADBAC7;">.</span><span style="color:#F69D50;">KeyPair</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">accountId</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">AccountId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// Account name</span></span>
<span class="line"><span style="color:#ADBAC7;">  name: </span><span style="color:#96D0FF;">&#39;alice&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// The domain where this account is registered</span></span>
<span class="line"><span style="color:#ADBAC7;">  domain_id: </span><span style="color:#DCBDFB;">DomainId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">    name: </span><span style="color:#96D0FF;">&#39;wonderland&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  }),</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">signer</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Signer</span><span style="color:#ADBAC7;">(accountId, keyPair)</span></span></code></pre></div><p>Now we&#39;re able to make signatures with <code>signer.sign(binary)</code>! However, to interact with Iroha, we need to be able to do more than just sign. We would need to send something to Iroha, like transactions or queries. <code>Torii</code> will help us with that.</p><p><code>Torii</code> handles HTTP / WebSocket communications with Iroha. We will use it to communicate with Iroha endpoints. With the help of <code>Torii</code> we can:</p><ul><li>Submit transactions with <code>Torii.submit()</code></li><li>Send queries with <code>Torii.request()</code></li><li>Listen for events with <code>Torii.listenForEvents()</code></li><li>Listen for blocks stream with <code>Torii.listenForBlocksStream()</code></li><li>and so on</li></ul><p><code>Torii</code> is a stateless object, a compendium of methods. You can look at it as if it is a class with only static methods. Each method has its own <em>requirements</em> to be passed in — some of them only need an HTTP transport and Iroha Torii Telemetry URL, others — a WebSocket transport and Iroha Torii API URL. To better understand how <code>Torii</code> is used, look at this example:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { Torii } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { VersionedSignedQueryRequest } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// --snip--</span></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">query</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">VersionedSignedQueryRequest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> Torii.</span><span style="color:#DCBDFB;">request</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  {</span></span>
<span class="line"><span style="color:#ADBAC7;">    fetch,</span></span>
<span class="line"><span style="color:#ADBAC7;">    apiURL: </span><span style="color:#96D0FF;">&#39;http://127.0.0.1:8080&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">  query,</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span></code></pre></div><p>In this example, we pass <code>fetch</code> (the HTTP transport) and <code>apiURL</code> as the first parameter, and the query itself as the second.</p><p>To work with <code>Torii</code>, we need to know Iroha Torii URLs. Our Iroha Peer is configured to listen for API endpoints at <code>http://127.0.0.1:8080</code> and for telemetry endpoints at <code>http://127.0.0.1:8081</code>. Then, we need to provide appropriate HTTP / WebSocket adapters which <code>Torii</code> will use<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. These adapters depend on the environment in which you are going to use <code>@iroha2/client</code>.</p><p>In Node.js, the full list of <code>Torii</code> requirements (i.e. covering all its methods) will look like this:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  ToriiRequirementsForApiHttp,</span></span>
<span class="line"><span style="color:#ADBAC7;">  ToriiRequirementsForApiWebSocket,</span></span>
<span class="line"><span style="color:#ADBAC7;">  ToriiRequirementsForTelemetry,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { adapter </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> WS } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client/web-socket/node&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> nodeFetch </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;node-fetch&#39;</span></span>
<span class="line"><span style="color:#768390;">// another alternative</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { fetch </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> undiciFetch } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;undici&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">toriiRequirements</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ToriiRequirementsForApiHttp</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">ToriiRequirementsForApiWebSocket</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">ToriiRequirementsForTelemetry</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  apiURL: </span><span style="color:#96D0FF;">&#39;http://127.0.0.1:8080&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  telemetryURL: </span><span style="color:#96D0FF;">&#39;http://127.0.0.1:8081&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  ws: </span><span style="color:#6CB6FF;">WS</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// type assertion is acceptable here</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// you can pass \`undiciFetch\` here as well</span></span>
<span class="line"><span style="color:#ADBAC7;">  fetch: nodeFetch </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> fetch,</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In the example above, we use <a href="https://www.npmjs.com/package/node-fetch" target="_blank" rel="noreferrer"><code>node-fetch</code></a> package which implements <a href="https://fetch.spec.whatwg.org/#fetch-method" target="_blank" rel="noreferrer">Fetch API</a> in Node.js. However, you can use <a href="https://undici.nodejs.org/#/?id=undicifetchinput-init-promise" target="_blank" rel="noreferrer"><code>undici</code></a> as well.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>fetch: nodeFetch as typeof fetch</code> type assertion is acceptable here for a reason. <code>Torii</code> expects the &quot;classic&quot;, native <code>fetch</code> function, which is available natively in Browser. However, both <code>node-fetch</code> and <code>undici</code> don&#39;t provide <code>fetch</code> that is 100% compatible with the native one. Since <code>Torii</code> doesn&#39;t rely on those corner-features that are partially provided by <code>node-fetch</code> and <code>undici</code>, it&#39;s fine to ignore the TypeScript error here.</p></div><p>And here is a sample of full <code>Torii</code> in-Browser requirements:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  ToriiRequirementsForApiHttp,</span></span>
<span class="line"><span style="color:#ADBAC7;">  ToriiRequirementsForApiWebSocket,</span></span>
<span class="line"><span style="color:#ADBAC7;">  ToriiRequirementsForTelemetry,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { adapter </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> WS } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client/web-socket/native&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">toriiRequirements</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ToriiRequirementsForApiHttp</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">ToriiRequirementsForApiWebSocket</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">ToriiRequirementsForTelemetry</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  apiURL: </span><span style="color:#96D0FF;">&#39;http://127.0.0.1:8080&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  telemetryURL: </span><span style="color:#96D0FF;">&#39;http://127.0.0.1:8081&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  ws: </span><span style="color:#6CB6FF;">WS</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  fetch:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// passing globally available \`fetch\`, but binding it to \`window\`</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// to avoid \`TypeError: &quot;&#39;fetch&#39; called on an</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//           object that does not implement interface Window.&quot;\`</span></span>
<span class="line"><span style="color:#ADBAC7;">    fetch.</span><span style="color:#DCBDFB;">bind</span><span style="color:#ADBAC7;">(window),</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">NOTE</p><p>We make <code>fetch.bind(window)</code> to avoid <code>TypeError: &quot;&#39;fetch&#39; called on an object that does not implement interface Window.&quot;</code>.</p></div><p>Great! Now we have <code>signer</code> and <code>Torii</code> requirements to work with. Finally, we can create a <code>Client</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { Client, Signer, ToriiRequirementsForApiHttp } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { Executable } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// --snip--</span></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">signer</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Signer</span></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">toriiRequirements</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ToriiRequirementsForApiHttp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">client</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Client</span><span style="color:#ADBAC7;">({ signer })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// \`Client\` will sign &amp; wrap \`Executable\` into \`VersionedSignedTransaction\`</span></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">exec</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Executable</span></span>
<span class="line"><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">submitExecutable</span><span style="color:#ADBAC7;">(toriiRequirements, exec)</span></span></code></pre></div><p><code>Client</code> provides useful utilities for transactions and queries. You can also use <code>Torii</code> to communicate with the endpoints directly. <code>Signer</code> is accessible with <code>client.signer</code>.</p><h2 id="_3-registering-a-domain" tabindex="-1">3. Registering a Domain <a class="header-anchor" href="#_3-registering-a-domain" aria-label="Permalink to &quot;3. Registering a Domain&quot;">​</a></h2><p>Here we see how similar the JavaScript code is to the Rust counterpart. It should be emphasised that the JavaScript library is a thin wrapper: It doesn&#39;t provide any special builder structures, meaning you have to work with bare-bones compiled Data Model structures and define all internal fields explicitly.</p><p>Doubly so, since JavaScript employs many implicit conversions, we highly recommend that you employ TypeScript. This makes many errors far easier to debug, but, unfortunately, results in more boilerplates.</p><p>Let&#39;s register a new domain named <code>looking_glass</code> using our current account, <em>alice@wondeland</em>.</p><p>First, we need to import necessary models and a pre-configured client instance:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { Client, ToriiRequirementsForApiHttp } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  DomainId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  EvaluatesToRegistrableBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Executable,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Expression,</span></span>
<span class="line"><span style="color:#ADBAC7;">  IdentifiableBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Instruction,</span></span>
<span class="line"><span style="color:#ADBAC7;">  MapNameValue,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Metadata,</span></span>
<span class="line"><span style="color:#ADBAC7;">  NewDomain,</span></span>
<span class="line"><span style="color:#ADBAC7;">  OptionIpfsPath,</span></span>
<span class="line"><span style="color:#ADBAC7;">  QueryBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  RegisterBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Value,</span></span>
<span class="line"><span style="color:#ADBAC7;">  VecInstruction,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// --snip--</span></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">client</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Client</span></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">toriiRequirements</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ToriiRequirementsForApiHttp</span></span></code></pre></div><p>To register a new domain, we need to submit a transaction with a single instruction: to register a new domain. Let&#39;s wrap it all in an async function:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-highlighted-lines"><code><span class="line"><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">registerDomain</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">domainName</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">registerBox</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">RegisterBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">    object: </span><span style="color:#DCBDFB;">EvaluatesToRegistrableBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">      expression: </span><span style="color:#DCBDFB;">Expression</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&#39;Raw&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Value</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#96D0FF;">&#39;Identifiable&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#DCBDFB;">IdentifiableBox</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&#39;NewDomain&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">NewDomain</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">              id: </span><span style="color:#DCBDFB;">DomainId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">                name: domainName, </span></span>
<span class="line"><span style="color:#ADBAC7;">              }),</span></span>
<span class="line"><span style="color:#ADBAC7;">              metadata: </span><span style="color:#DCBDFB;">Metadata</span><span style="color:#ADBAC7;">({ map: </span><span style="color:#DCBDFB;">MapNameValue</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Map</span><span style="color:#ADBAC7;">()) }),</span></span>
<span class="line"><span style="color:#ADBAC7;">              logo: </span><span style="color:#DCBDFB;">OptionIpfsPath</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;None&#39;</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">            }),</span></span>
<span class="line"><span style="color:#ADBAC7;">          ),</span></span>
<span class="line"><span style="color:#ADBAC7;">        ),</span></span>
<span class="line"><span style="color:#ADBAC7;">      ),</span></span>
<span class="line"><span style="color:#ADBAC7;">    }),</span></span>
<span class="line"><span style="color:#ADBAC7;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">submitExecutable</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    toriiRequirements,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Executable</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Instructions&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#DCBDFB;">VecInstruction</span><span style="color:#ADBAC7;">([</span><span style="color:#DCBDFB;">Instruction</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Register&#39;</span><span style="color:#ADBAC7;">, registerBox)])),</span></span>
<span class="line"><span style="color:#ADBAC7;">  )</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><p>Which we use to register the domain like so:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">registerDomain</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;looking_glass&#39;</span><span style="color:#ADBAC7;">)</span></span></code></pre></div><p>We can also use Query API to ensure that the new domain is created. Let&#39;s create another function that wraps that functionality:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-highlighted-lines"><code><span class="line"><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ensureDomainExistence</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">domainName</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// Query all domains</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">requestWithQueryBox</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    toriiRequirements,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">QueryBox</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;FindAllDomains&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// Display the request status</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;%o&#39;</span><span style="color:#ADBAC7;">, result)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// Obtain the domain</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">domain</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> result</span></span>
<span class="line"><span style="color:#ADBAC7;">    .</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Ok&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    .result.enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Vec&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    .</span><span style="color:#DCBDFB;">map</span><span style="color:#ADBAC7;">((</span><span style="color:#F69D50;">x</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> x.enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Identifiable&#39;</span><span style="color:#ADBAC7;">).enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Domain&#39;</span><span style="color:#ADBAC7;">))</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">    .</span><span style="color:#DCBDFB;">find</span><span style="color:#ADBAC7;">((</span><span style="color:#F69D50;">x</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> x.id.name </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> domainName) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// Throw an error if the domain is unavailable</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">domain) </span><span style="color:#F47067;">throw</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Error</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Not found&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><p>Now you can ensure that domain is created by calling:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ensureDomainExistence</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;looking_glass&#39;</span><span style="color:#ADBAC7;">)</span></span></code></pre></div><h2 id="_4-registering-an-account" tabindex="-1">4. Registering an Account <a class="header-anchor" href="#_4-registering-an-account" aria-label="Permalink to &quot;4. Registering an Account&quot;">​</a></h2><p>Registering an account is a bit more involved than registering a domain. With a domain, the only concern is the domain name. However, with an account, there are a few more things to worry about.</p><p>First of all, we need to create an <code>AccountId</code>. Note that we can only register an account to an existing domain. The best UX design practices dictate that you should check if the requested domain exists <em>now</em>, and if it doesn&#39;t, suggest a fix to the user. After that, we can create a new account named <em>white_rabbit</em>.</p><p>Imports we need:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  AccountId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  DomainId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  EvaluatesToRegistrableBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Expression,</span></span>
<span class="line"><span style="color:#ADBAC7;">  IdentifiableBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Instruction,</span></span>
<span class="line"><span style="color:#ADBAC7;">  MapNameValue,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Metadata,</span></span>
<span class="line"><span style="color:#ADBAC7;">  NewAccount,</span></span>
<span class="line"><span style="color:#ADBAC7;">  PublicKey,</span></span>
<span class="line"><span style="color:#ADBAC7;">  RegisterBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Value,</span></span>
<span class="line"><span style="color:#ADBAC7;">  VecPublicKey,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span></code></pre></div><p>The <code>AccountId</code> structure:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">accountId</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">AccountId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  name: </span><span style="color:#96D0FF;">&#39;white_rabbit&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  domain_id: </span><span style="color:#DCBDFB;">DomainId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">    name: </span><span style="color:#96D0FF;">&#39;looking_glass&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  }),</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span></code></pre></div><p>Second, you should provide the account with a public key. It is tempting to generate both it and the private key at this time, but it isn&#39;t the brightest idea. Remember that <em>the white_rabbit</em> trusts <em>you, alice@wonderland,</em> to create an account for them in the domain <em>looking_glass</em>, <strong>but doesn&#39;t want you to have access to that account after creation</strong>.</p><p>If you gave <em>white_rabbit</em> a key that you generated yourself, how would they know if you don&#39;t have a copy of their private key? Instead, the best way is to <strong>ask</strong> <em>white_rabbit</em> to generate a new key-pair, and give you the public half of it.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">pubKey</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PublicKey</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  payload: </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Uint8Array</span><span style="color:#ADBAC7;">([</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">/* put bytes here */</span></span>
<span class="line"><span style="color:#ADBAC7;">  ]),</span></span>
<span class="line"><span style="color:#ADBAC7;">  digest_function: </span><span style="color:#96D0FF;">&#39;some_digest&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span></code></pre></div><p>Only then do we build an instruction from it:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-highlighted-lines"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">registerAccountInstruction</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Instruction</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">&#39;Register&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">RegisterBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">    object: </span><span style="color:#DCBDFB;">EvaluatesToRegistrableBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">      expression: </span><span style="color:#DCBDFB;">Expression</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&#39;Raw&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Value</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#96D0FF;">&#39;Identifiable&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#DCBDFB;">IdentifiableBox</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&#39;NewAccount&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">NewAccount</span><span style="color:#ADBAC7;">({</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">              id: accountId, </span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">              signatories: </span><span style="color:#DCBDFB;">VecPublicKey</span><span style="color:#ADBAC7;">([pubKey]),</span></span>
<span class="line"><span style="color:#ADBAC7;">              metadata: </span><span style="color:#DCBDFB;">Metadata</span><span style="color:#ADBAC7;">({ map: </span><span style="color:#DCBDFB;">MapNameValue</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Map</span><span style="color:#ADBAC7;">()) }),</span></span>
<span class="line"><span style="color:#ADBAC7;">            }),</span></span>
<span class="line"><span style="color:#ADBAC7;">          ),</span></span>
<span class="line"><span style="color:#ADBAC7;">        ),</span></span>
<span class="line"><span style="color:#ADBAC7;">      ),</span></span>
<span class="line"><span style="color:#ADBAC7;">    }),</span></span>
<span class="line"><span style="color:#ADBAC7;">  }),</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span></code></pre></div><p>Which is then wrapped in a transaction and submitted to the peer the same way as in the previous section when we registered a domain.</p><h2 id="_5-registering-and-minting-assets" tabindex="-1">5. Registering and minting assets <a class="header-anchor" href="#_5-registering-and-minting-assets" aria-label="Permalink to &quot;5. Registering and minting assets&quot;">​</a></h2><p>Iroha has been built with few <a href="./blockchain/assets.html">underlying assumptions</a> about what the assets need to be in terms of their value type and characteristics (fungible or non-fungible, mintable or non-mintable).</p><p>In JS, you can create a new asset with the following construction:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-highlighted-lines"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  AssetDefinition,</span></span>
<span class="line"><span style="color:#ADBAC7;">  AssetDefinitionId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  AssetValueType,</span></span>
<span class="line"><span style="color:#ADBAC7;">  DomainId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  EvaluatesToRegistrableBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Expression,</span></span>
<span class="line"><span style="color:#ADBAC7;">  IdentifiableBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Instruction,</span></span>
<span class="line"><span style="color:#ADBAC7;">  MapNameValue,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Metadata,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Mintable,</span></span>
<span class="line"><span style="color:#ADBAC7;">  RegisterBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Value,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">time</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">AssetDefinition</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  value_type: </span><span style="color:#DCBDFB;">AssetValueType</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Quantity&#39;</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">  id: </span><span style="color:#DCBDFB;">AssetDefinitionId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">    name: </span><span style="color:#96D0FF;">&#39;time&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    domain_id: </span><span style="color:#DCBDFB;">DomainId</span><span style="color:#ADBAC7;">({ name: </span><span style="color:#96D0FF;">&#39;looking_glass&#39;</span><span style="color:#ADBAC7;"> }),</span></span>
<span class="line"><span style="color:#ADBAC7;">  }),</span></span>
<span class="line"><span style="color:#ADBAC7;">  metadata: </span><span style="color:#DCBDFB;">Metadata</span><span style="color:#ADBAC7;">({ map: </span><span style="color:#DCBDFB;">MapNameValue</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Map</span><span style="color:#ADBAC7;">()) }),</span></span>
<span class="line"><span style="color:#ADBAC7;">  mintable: </span><span style="color:#DCBDFB;">Mintable</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Infinitely&#39;</span><span style="color:#ADBAC7;">), </span><span style="color:#768390;">// If only we could mint more time.</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">register</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Instruction</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">&#39;Register&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">RegisterBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">    object: </span><span style="color:#DCBDFB;">EvaluatesToRegistrableBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">      expression: </span><span style="color:#DCBDFB;">Expression</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&#39;Raw&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Value</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Identifiable&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#DCBDFB;">IdentifiableBox</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;AssetDefinition&#39;</span><span style="color:#ADBAC7;">, time)), </span></span>
<span class="line"><span style="color:#ADBAC7;">      ),</span></span>
<span class="line"><span style="color:#ADBAC7;">    }),</span></span>
<span class="line"><span style="color:#ADBAC7;">  }),</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span></code></pre></div><p>Pay attention to the fact that we have defined the asset as <code>Mintable(&#39;Not&#39;)</code>. What this means is that we cannot create more of <code>time</code>. The late bunny will always be late, because even the super-user of the blockchain cannot mint more of <code>time</code> than already exists in the genesis block.</p><p>This means that no matter how hard the <em>white_rabbit</em> tries, the time that he has is the time that was given to him at genesis. And since we haven&#39;t defined any time in the domain <em>looking_glass</em> at genesis and defined time in a non-mintable fashion afterwards, the <em>white_rabbit</em> is doomed to always be late.</p><p>If we had set <code>mintable: Mintable(&#39;Infinitely&#39;)</code> on our time asset, we could mint it:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  AccountId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  AssetDefinitionId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  AssetId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  DomainId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  EvaluatesToIdBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  EvaluatesToValue,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Expression,</span></span>
<span class="line"><span style="color:#ADBAC7;">  IdBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Instruction,</span></span>
<span class="line"><span style="color:#ADBAC7;">  MintBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  NumericValue,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Value,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">mint</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Instruction</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">&#39;Mint&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">MintBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">    object: </span><span style="color:#DCBDFB;">EvaluatesToValue</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">      expression: </span><span style="color:#DCBDFB;">Expression</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Raw&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#DCBDFB;">Value</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Numeric&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#DCBDFB;">NumericValue</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;U32&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">))),</span></span>
<span class="line"><span style="color:#ADBAC7;">    }),</span></span>
<span class="line"><span style="color:#ADBAC7;">    destination_id: </span><span style="color:#DCBDFB;">EvaluatesToIdBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">      expression: </span><span style="color:#DCBDFB;">Expression</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&#39;Raw&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Value</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#96D0FF;">&#39;Id&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#DCBDFB;">IdBox</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&#39;AssetId&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">AssetId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">              account_id: </span><span style="color:#DCBDFB;">AccountId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">                name: </span><span style="color:#96D0FF;">&#39;alice&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                domain_id: </span><span style="color:#DCBDFB;">DomainId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">                  name: </span><span style="color:#96D0FF;">&#39;wonderland&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                }),</span></span>
<span class="line"><span style="color:#ADBAC7;">              }),</span></span>
<span class="line"><span style="color:#ADBAC7;">              definition_id: </span><span style="color:#DCBDFB;">AssetDefinitionId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">                name: </span><span style="color:#96D0FF;">&#39;time&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                domain_id: </span><span style="color:#DCBDFB;">DomainId</span><span style="color:#ADBAC7;">({ name: </span><span style="color:#96D0FF;">&#39;looking_glass&#39;</span><span style="color:#ADBAC7;"> }),</span></span>
<span class="line"><span style="color:#ADBAC7;">              }),</span></span>
<span class="line"><span style="color:#ADBAC7;">            }),</span></span>
<span class="line"><span style="color:#ADBAC7;">          ),</span></span>
<span class="line"><span style="color:#ADBAC7;">        ),</span></span>
<span class="line"><span style="color:#ADBAC7;">      ),</span></span>
<span class="line"><span style="color:#ADBAC7;">    }),</span></span>
<span class="line"><span style="color:#ADBAC7;">  }),</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span></code></pre></div><p>Again it should be emphasised that an Iroha 2 network is strongly typed. You need to take special care to make sure that only unsigned integers are passed to the <code>Value(&#39;U32&#39;, ...)</code> factory method. Fixed precision values also need to be taken into consideration. Any attempt to add to or subtract from a negative Fixed-precision value will result in an error.</p><h2 id="_6-transferring-assets" tabindex="-1">6. Transferring assets <a class="header-anchor" href="#_6-transferring-assets" aria-label="Permalink to &quot;6. Transferring assets&quot;">​</a></h2><p>After minting the assets, you can transfer them to another account. In the example below, Alice transfers to Mouse 100 units of <code>time</code> asset:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  AccountId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  AssetDefinitionId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  AssetId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  DomainId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  EvaluatesToIdBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  EvaluatesToValue,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Expression,</span></span>
<span class="line"><span style="color:#ADBAC7;">  IdBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Instruction,</span></span>
<span class="line"><span style="color:#ADBAC7;">  NumericValue,</span></span>
<span class="line"><span style="color:#ADBAC7;">  TransferBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Value,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">domainId</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">DomainId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  name: </span><span style="color:#96D0FF;">&#39;wonderland&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">assetDefinitionId</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">AssetDefinitionId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  name: </span><span style="color:#96D0FF;">&#39;time&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  domain_id: domainId,</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">amountToTransfer</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Value</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Numeric&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#DCBDFB;">NumericValue</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;U32&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">fromAccount</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">AccountId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  name: </span><span style="color:#96D0FF;">&#39;alice&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  domain_id: domainId,</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">toAccount</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">AccountId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  name: </span><span style="color:#96D0FF;">&#39;mouse&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  domain_id: domainId,</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">evaluatesToAssetId</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">assetId</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AssetId</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">EvaluatesToIdBox</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">EvaluatesToIdBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">    expression: </span><span style="color:#DCBDFB;">Expression</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Raw&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#DCBDFB;">Value</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Id&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#DCBDFB;">IdBox</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;AssetId&#39;</span><span style="color:#ADBAC7;">, assetId))),</span></span>
<span class="line"><span style="color:#ADBAC7;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">transferAssetInstruction</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Instruction</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">&#39;Transfer&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">TransferBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">    source_id: </span><span style="color:#DCBDFB;">evaluatesToAssetId</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">AssetId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">        definition_id: assetDefinitionId,</span></span>
<span class="line"><span style="color:#ADBAC7;">        account_id: fromAccount,</span></span>
<span class="line"><span style="color:#ADBAC7;">      }),</span></span>
<span class="line"><span style="color:#ADBAC7;">    ),</span></span>
<span class="line"><span style="color:#ADBAC7;">    destination_id: </span><span style="color:#DCBDFB;">evaluatesToAssetId</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">AssetId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">        definition_id: assetDefinitionId,</span></span>
<span class="line"><span style="color:#ADBAC7;">        account_id: toAccount,</span></span>
<span class="line"><span style="color:#ADBAC7;">      }),</span></span>
<span class="line"><span style="color:#ADBAC7;">    ),</span></span>
<span class="line"><span style="color:#ADBAC7;">    object: </span><span style="color:#DCBDFB;">EvaluatesToValue</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">      expression: </span><span style="color:#DCBDFB;">Expression</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Raw&#39;</span><span style="color:#ADBAC7;">, amountToTransfer),</span></span>
<span class="line"><span style="color:#ADBAC7;">    }),</span></span>
<span class="line"><span style="color:#ADBAC7;">  }),</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span></code></pre></div><h2 id="_7-querying-for-domains-accounts-and-assets" tabindex="-1">7. Querying for Domains, Accounts and Assets <a class="header-anchor" href="#_7-querying-for-domains-accounts-and-assets" aria-label="Permalink to &quot;7. Querying for Domains, Accounts and Assets&quot;">​</a></h2><p>TODO</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { Client, ToriiRequirementsForApiHttp } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { QueryBox } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">client</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Client</span></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">toriiRequirements</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ToriiRequirementsForApiHttp</span></span></code></pre></div><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-o4uJJ" id="tab-WqAOq0c" checked="checked"><label for="tab-WqAOq0c">Domains</label><input type="radio" name="group-o4uJJ" id="tab-G1YPV3b"><label for="tab-G1YPV3b">Accounts</label><input type="radio" name="group-o4uJJ" id="tab-3esF2DV"><label for="tab-3esF2DV">Assets</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">requestWithQueryBox</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  toriiRequirements,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">QueryBox</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;FindAllDomains&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">domains</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> result</span></span>
<span class="line"><span style="color:#ADBAC7;">  .</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Ok&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">  .result.enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Vec&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">  .</span><span style="color:#DCBDFB;">map</span><span style="color:#ADBAC7;">((</span><span style="color:#F69D50;">x</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> x.enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Identifiable&#39;</span><span style="color:#ADBAC7;">).enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Domain&#39;</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">domain</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">of</span><span style="color:#ADBAC7;"> domains) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">\`Domain &quot;\${</span><span style="color:#ADBAC7;">domain</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">name</span><span style="color:#96D0FF;">}&quot; has \${</span><span style="color:#ADBAC7;">domain</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">accounts</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">size</span><span style="color:#96D0FF;">} accounts\`</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#96D0FF;">\` and \${</span><span style="color:#ADBAC7;">domain</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">asset_definitions</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">size</span><span style="color:#96D0FF;">} asset definitions\`</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  )</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// =&gt; Domain &quot;wonderland&quot; has 5 accounts and 3 asset definitions</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">requestWithQueryBox</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  toriiRequirements,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">QueryBox</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;FindAllAccounts&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">accounts</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> result</span></span>
<span class="line"><span style="color:#ADBAC7;">  .</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Ok&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">  .result.enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Vec&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">  .</span><span style="color:#DCBDFB;">map</span><span style="color:#ADBAC7;">((</span><span style="color:#F69D50;">x</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> x.enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Identifiable&#39;</span><span style="color:#ADBAC7;">).enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Account&#39;</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">account</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">of</span><span style="color:#ADBAC7;"> accounts) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">\`Account &quot;\${</span><span style="color:#ADBAC7;">account</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">name</span><span style="color:#96D0FF;">}@\${</span><span style="color:#ADBAC7;">account</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">domain_id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">name</span><span style="color:#96D0FF;">}&quot; \`</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#96D0FF;">\`has \${</span><span style="color:#ADBAC7;">account</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">assets</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">size</span><span style="color:#96D0FF;">} assets\`</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  )</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// =&gt; Account &quot;alice@wonderland&quot; has 3 assets</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">requestWithQueryBox</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  toriiRequirements,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">QueryBox</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;FindAllAssets&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">assets</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> result</span></span>
<span class="line"><span style="color:#ADBAC7;">  .</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Ok&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">  .result.enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Vec&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">  .</span><span style="color:#DCBDFB;">map</span><span style="color:#ADBAC7;">((</span><span style="color:#F69D50;">x</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> x.enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Identifiable&#39;</span><span style="color:#ADBAC7;">).enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Asset&#39;</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">asset</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">of</span><span style="color:#ADBAC7;"> assets) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">\`Asset &quot;\${</span><span style="color:#ADBAC7;">asset</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">definition_id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">name</span><span style="color:#96D0FF;">}#\${</span><span style="color:#ADBAC7;">asset</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">definition_id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">domain_id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">name</span><span style="color:#96D0FF;">}&quot; \`</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#96D0FF;">\`at account &quot;\${</span><span style="color:#ADBAC7;">asset</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">account_id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">name</span><span style="color:#96D0FF;">}@\${</span><span style="color:#ADBAC7;">asset</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">account_id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">domain_id</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">name</span><span style="color:#96D0FF;">}&quot; \`</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#96D0FF;">\`has type &quot;\${</span><span style="color:#ADBAC7;">asset</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">value</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">enum</span><span style="color:#96D0FF;">.</span><span style="color:#ADBAC7;">tag</span><span style="color:#96D0FF;">}&quot;\`</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  )</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// =&gt; Asset &quot;rose#wonderland&quot; at account &quot;alice@wonderland&quot; has type &quot;Quantity&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div></div></div><h2 id="_8-visualizing-outputs-in-web-ui" tabindex="-1">8. Visualizing outputs in Web UI <a class="header-anchor" href="#_8-visualizing-outputs-in-web-ui" aria-label="Permalink to &quot;8. Visualizing outputs in Web UI&quot;">​</a></h2><p>Finally, we should talk about visualising data. The Rust API is currently the most complete in terms of available queries and instructions. After all, this is the language in which Iroha 2 was built.</p><p>Let&#39;s build a small Vue 3 application that uses each API we&#39;ve discovered in this guide!</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In this guide, we are roughly recreating the project that is a part of <code>iroha-javascript</code> integration tests. If you want to see the full project, please refer to the <a href="https://github.com/hyperledger/iroha-javascript/tree/iroha2/packages/client/test/integration/test-web" target="_blank" rel="noreferrer"><code>@iroha2/client-test-web</code> sources</a>.</p></div><p>Our app will consist of 3 main views:</p><ul><li>Status checker that periodically requests peer status (e.g. current blocks height) and shows it;</li><li>Domain creator, which is a form to create a new domain with specified name;</li><li>Listener with a toggle to setup listening for events.</li></ul><p>You can use this folder structure as a reference:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#adbac7;">╭───┬──────────────────────────────╮</span></span>
<span class="line"><span style="color:#adbac7;">│ # │             name             │</span></span>
<span class="line"><span style="color:#adbac7;">├───┼──────────────────────────────┤</span></span>
<span class="line"><span style="color:#adbac7;">│ 0 │ App.vue                      │</span></span>
<span class="line"><span style="color:#adbac7;">│ 1 │ client.ts                    │</span></span>
<span class="line"><span style="color:#adbac7;">│ 2 │ components/CreateDomain.vue  │</span></span>
<span class="line"><span style="color:#adbac7;">│ 3 │ components/Listener.vue      │</span></span>
<span class="line"><span style="color:#adbac7;">│ 4 │ components/StatusChecker.vue │</span></span>
<span class="line"><span style="color:#adbac7;">│ 5 │ config.json                  │</span></span>
<span class="line"><span style="color:#adbac7;">│ 6 │ crypto.ts                    │</span></span>
<span class="line"><span style="color:#adbac7;">│ 7 │ main.ts                      │</span></span>
<span class="line"><span style="color:#adbac7;">╰───┴──────────────────────────────╯</span></span></code></pre></div><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-82RhE" id="tab-uWz0zS0" checked="checked"><label for="tab-uWz0zS0">config.json</label><input type="radio" name="group-82RhE" id="tab-hbMtrNz"><label for="tab-hbMtrNz">crypto.ts</label><input type="radio" name="group-82RhE" id="tab-507FJCY"><label for="tab-507FJCY">client.ts</label><input type="radio" name="group-82RhE" id="tab-NpMMcaK"><label for="tab-NpMMcaK">components/StatusChecker.vue</label><input type="radio" name="group-82RhE" id="tab-gVREbGh"><label for="tab-gVREbGh">components/CreateDomain.vue</label><input type="radio" name="group-82RhE" id="tab--_iO6Wx"><label for="tab--_iO6Wx">components/EventListener.vue</label><input type="radio" name="group-82RhE" id="tab-Dh03P5y"><label for="tab-Dh03P5y">App.vue</label><input type="radio" name="group-82RhE" id="tab-Lbyj6ZZ"><label for="tab-Lbyj6ZZ">main.ts</label></div><div class="blocks"><div class="language-json active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#ADBAC7;">{</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">&quot;torii&quot;</span><span style="color:#ADBAC7;">: {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">&quot;apiURL&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;http://127.0.0.1:8080&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">&quot;telemetryURL&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;http://127.0.0.1:8081&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">&quot;account&quot;</span><span style="color:#ADBAC7;">: {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">&quot;name&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;alice&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">&quot;domain_id&quot;</span><span style="color:#ADBAC7;">: {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">&quot;name&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;wonderland&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">&quot;public_key&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;ed01207233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">&quot;private_key&quot;</span><span style="color:#ADBAC7;">: {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">&quot;digest_function&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;ed25519&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">&quot;payload&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;9ac47abf59b356e0bd7dcbbbb4dec080e302156a48ca907e47cb6aea1d32719e7233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { crypto, init } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/crypto-target-web&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">init</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> { crypto }</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { Client, Signer } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { adapter </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> WS } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client/web-socket/native&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { crypto } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./crypto&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { client_config } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;../../config&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { AccountId } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">HOST</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> window.location.host</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">toriiPre</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// proxified with vite</span></span>
<span class="line"><span style="color:#ADBAC7;">  apiURL: </span><span style="color:#96D0FF;">\`http://\${</span><span style="color:#6CB6FF;">HOST</span><span style="color:#96D0FF;">}/torii/api\`</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  telemetryURL: </span><span style="color:#96D0FF;">\`http://\${</span><span style="color:#6CB6FF;">HOST</span><span style="color:#96D0FF;">}/torii/telemetry\`</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  ws: </span><span style="color:#6CB6FF;">WS</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  fetch: fetch.</span><span style="color:#DCBDFB;">bind</span><span style="color:#ADBAC7;">(window),</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">signer</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Signer</span><span style="color:#ADBAC7;">(client_config.account </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AccountId</span><span style="color:#ADBAC7;">, crypto.KeyPair.</span><span style="color:#DCBDFB;">fromJSON</span><span style="color:#ADBAC7;">(client_config))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">client</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Client</span><span style="color:#ADBAC7;">({ signer })</span></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">script</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">setup</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">lang</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ts&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { useIntervalFn } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@vueuse/core&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { useStaleState, useTask } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@vue-kakuyaku/core&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { toriiPre } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;../client&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { Torii } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">state</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">run</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useTask</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> Torii.</span><span style="color:#DCBDFB;">getStatus</span><span style="color:#ADBAC7;">(toriiPre), { immediate: </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;"> })</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">stale</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useStaleState</span><span style="color:#ADBAC7;">(state)</span></span>
<span class="line"><span style="color:#DCBDFB;">useIntervalFn</span><span style="color:#ADBAC7;">(run, </span><span style="color:#6CB6FF;">1000</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">script</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">template</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">div</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">h3</span><span style="color:#ADBAC7;">&gt;Status&lt;/</span><span style="color:#8DDB8C;">h3</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">ul</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">v-if</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;stale.fulfilled&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">li</span><span style="color:#ADBAC7;">&gt;Blocks: {{ stale.fulfilled.value.blocks }}&lt;/</span><span style="color:#8DDB8C;">li</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">li</span><span style="color:#ADBAC7;">&gt;Uptime (sec): {{ stale.fulfilled.value.uptime.secs }}&lt;/</span><span style="color:#8DDB8C;">li</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">ul</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;/</span><span style="color:#8DDB8C;">div</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">template</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">script</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">setup</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">lang</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ts&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  DomainId,</span></span>
<span class="line"><span style="color:#ADBAC7;">  EvaluatesToRegistrableBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Executable,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Expression,</span></span>
<span class="line"><span style="color:#ADBAC7;">  IdentifiableBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Instruction,</span></span>
<span class="line"><span style="color:#ADBAC7;">  MapNameValue,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Metadata,</span></span>
<span class="line"><span style="color:#ADBAC7;">  NewDomain,</span></span>
<span class="line"><span style="color:#ADBAC7;">  OptionIpfsPath,</span></span>
<span class="line"><span style="color:#ADBAC7;">  RegisterBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  Value,</span></span>
<span class="line"><span style="color:#ADBAC7;">  VecInstruction,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { ref } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { client, toriiPre } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;../client&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { useTask } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@vue-kakuyaku/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">domainName</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ref</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">state</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">run</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">registerDomain</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useTask</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">submitExecutable</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    toriiPre,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Executable</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#96D0FF;">&#39;Instructions&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">VecInstruction</span><span style="color:#ADBAC7;">([</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Instruction</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#96D0FF;">&#39;Register&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#DCBDFB;">RegisterBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">            object: </span><span style="color:#DCBDFB;">EvaluatesToRegistrableBox</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">              expression: </span><span style="color:#DCBDFB;">Expression</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#96D0FF;">&#39;Raw&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">Value</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#96D0FF;">&#39;Identifiable&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#DCBDFB;">IdentifiableBox</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">                    </span><span style="color:#96D0FF;">&#39;NewDomain&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                    </span><span style="color:#DCBDFB;">NewDomain</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">                      id: </span><span style="color:#DCBDFB;">DomainId</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">                        name: domainName.value,</span></span>
<span class="line"><span style="color:#ADBAC7;">                      }),</span></span>
<span class="line"><span style="color:#ADBAC7;">                      metadata: </span><span style="color:#DCBDFB;">Metadata</span><span style="color:#ADBAC7;">({ map: </span><span style="color:#DCBDFB;">MapNameValue</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Map</span><span style="color:#ADBAC7;">()) }),</span></span>
<span class="line"><span style="color:#ADBAC7;">                      logo: </span><span style="color:#DCBDFB;">OptionIpfsPath</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;None&#39;</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">                    }),</span></span>
<span class="line"><span style="color:#ADBAC7;">                  ),</span></span>
<span class="line"><span style="color:#ADBAC7;">                ),</span></span>
<span class="line"><span style="color:#ADBAC7;">              ),</span></span>
<span class="line"><span style="color:#ADBAC7;">            }),</span></span>
<span class="line"><span style="color:#ADBAC7;">          }),</span></span>
<span class="line"><span style="color:#ADBAC7;">        ),</span></span>
<span class="line"><span style="color:#ADBAC7;">      ]),</span></span>
<span class="line"><span style="color:#ADBAC7;">    ),</span></span>
<span class="line"><span style="color:#ADBAC7;">  )</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">script</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">template</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">div</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">h3</span><span style="color:#ADBAC7;">&gt;Create Domain&lt;/</span><span style="color:#8DDB8C;">h3</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">p</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">label</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">for</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;domain&quot;</span><span style="color:#ADBAC7;">&gt;New domain name:&lt;/</span><span style="color:#8DDB8C;">label</span><span style="color:#ADBAC7;">&gt; &lt;</span><span style="color:#8DDB8C;">input</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">id</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;domain&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">v-model</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;domainName&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">p</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">p</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">button</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">@click</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;registerDomain()&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        Register domain{{ state.pending ? &#39;...&#39; : &#39;&#39; }}</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;/</span><span style="color:#8DDB8C;">button</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">p</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;/</span><span style="color:#8DDB8C;">div</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">template</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">script</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">setup</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">lang</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ts&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { SetupEventsReturn, Torii } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  FilterBox,</span></span>
<span class="line"><span style="color:#ADBAC7;">  OptionHash,</span></span>
<span class="line"><span style="color:#ADBAC7;">  OptionPipelineEntityKind,</span></span>
<span class="line"><span style="color:#ADBAC7;">  OptionPipelineStatusKind,</span></span>
<span class="line"><span style="color:#ADBAC7;">  PipelineEntityKind,</span></span>
<span class="line"><span style="color:#ADBAC7;">  PipelineEventFilter,</span></span>
<span class="line"><span style="color:#ADBAC7;">  PipelineStatus,</span></span>
<span class="line"><span style="color:#ADBAC7;">  PipelineStatusKind,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { computed, onBeforeUnmount, shallowReactive, shallowRef } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { toriiPre } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;../client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">bytesToHex</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">bytes</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">[])</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> bytes.</span><span style="color:#DCBDFB;">map</span><span style="color:#ADBAC7;">((</span><span style="color:#F69D50;">byte</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> byte.</span><span style="color:#DCBDFB;">toString</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">).</span><span style="color:#DCBDFB;">padStart</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;0&#39;</span><span style="color:#ADBAC7;">)).</span><span style="color:#DCBDFB;">join</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">EventData</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">hash</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">status</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">events</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">shallowReactive</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">EventData</span><span style="color:#ADBAC7;">[]&gt;([])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">currentListener</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">shallowRef</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">SetupEventsReturn</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">isListening</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">computed</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">currentListener.value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">displayStatus</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">status</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">PipelineStatus</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">switch</span><span style="color:#ADBAC7;"> (status.enum.tag) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">case</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;Validating&#39;</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;validating&#39;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">case</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;Committed&#39;</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;committed&#39;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">case</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;Rejected&#39;</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;rejected with some reason&#39;</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">startListening</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">  currentListener.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> Torii.</span><span style="color:#DCBDFB;">listenForEvents</span><span style="color:#ADBAC7;">(toriiPre, {</span></span>
<span class="line"><span style="color:#ADBAC7;">    filter: </span><span style="color:#DCBDFB;">FilterBox</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#96D0FF;">&#39;Pipeline&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">PipelineEventFilter</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">        entity_kind: </span><span style="color:#DCBDFB;">OptionPipelineEntityKind</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Some&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#DCBDFB;">PipelineEntityKind</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Transaction&#39;</span><span style="color:#ADBAC7;">)),</span></span>
<span class="line"><span style="color:#ADBAC7;">        status_kind: </span><span style="color:#DCBDFB;">OptionPipelineStatusKind</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Some&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#DCBDFB;">PipelineStatusKind</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Committed&#39;</span><span style="color:#ADBAC7;">)),</span></span>
<span class="line"><span style="color:#ADBAC7;">        hash: </span><span style="color:#DCBDFB;">OptionHash</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;None&#39;</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">      }),</span></span>
<span class="line"><span style="color:#ADBAC7;">    ),</span></span>
<span class="line"><span style="color:#ADBAC7;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  currentListener.value.ee.</span><span style="color:#DCBDFB;">on</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;event&#39;</span><span style="color:#ADBAC7;">, (</span><span style="color:#F69D50;">event</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">hash</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">status</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> event.enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Pipeline&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    events.</span><span style="color:#DCBDFB;">push</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">      hash: </span><span style="color:#DCBDFB;">bytesToHex</span><span style="color:#ADBAC7;">([</span><span style="color:#F47067;">...</span><span style="color:#ADBAC7;">hash]),</span></span>
<span class="line"><span style="color:#ADBAC7;">      status: </span><span style="color:#DCBDFB;">displayStatus</span><span style="color:#ADBAC7;">(status),</span></span>
<span class="line"><span style="color:#ADBAC7;">    })</span></span>
<span class="line"><span style="color:#ADBAC7;">  })</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">stopListening</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> currentListener.value?.</span><span style="color:#DCBDFB;">stop</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">  currentListener.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB;">onBeforeUnmount</span><span style="color:#ADBAC7;">(stopListening)</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">script</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">template</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">div</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">h3</span><span style="color:#ADBAC7;">&gt;Listening&lt;/</span><span style="color:#8DDB8C;">h3</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">p</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">button</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">@click</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;isListening ? stopListening() : startListening()&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        {{ isListening ? &#39;Stop&#39; : &#39;Listen&#39; }}</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;/</span><span style="color:#8DDB8C;">button</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">p</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">p</span><span style="color:#ADBAC7;">&gt;Events:&lt;/</span><span style="color:#8DDB8C;">p</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">ul</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;events-list&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">li</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">v-for</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;{ hash, status } in events&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">:key</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;hash&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        Transaction &lt;</span><span style="color:#8DDB8C;">code</span><span style="color:#ADBAC7;">&gt;{{ hash }}&lt;/</span><span style="color:#8DDB8C;">code</span><span style="color:#ADBAC7;">&gt; status:</span></span>
<span class="line"><span style="color:#ADBAC7;">        {{ status }}</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;/</span><span style="color:#8DDB8C;">li</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">ul</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;/</span><span style="color:#8DDB8C;">div</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">template</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">script</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">setup</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">lang</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ts&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> CreateDomain </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./components/CreateDomain.vue&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> EventListener </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./components/EventListener.vue&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> StatusChecker </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./components/StatusChecker.vue&#39;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">script</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">template</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#FF938A;font-style:italic;">StatusChecker</span><span style="color:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">hr</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#FF938A;font-style:italic;">CreateDomain</span><span style="color:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">hr</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#FF938A;font-style:italic;">EventListener</span><span style="color:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">template</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">style</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">lang</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;scss&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">#app</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">padding</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">16</span><span style="color:#F47067;">px</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">font-family</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">sans-serif</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">style</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { createApp } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> App </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./App.vue&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { Logger } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/data-model&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { crypto } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./crypto&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { setCrypto } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB;">setCrypto</span><span style="color:#ADBAC7;">(crypto)</span></span>
<span class="line"><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Logger</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">mount</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">localStorage.debug </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;*&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB;">createApp</span><span style="color:#ADBAC7;">(App).</span><span style="color:#DCBDFB;">mount</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;#app&#39;</span><span style="color:#ADBAC7;">)</span></span></code></pre></div></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>In <code>client.ts</code>, we import the configuration file like this:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { client_config } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;../../config&#39;</span></span></code></pre></div><p>Note that you need to import the config in this way because this is how the source code of this application works. You can interpret this line as <code>import client_config from &#39;config.json&#39;</code>.</p></div><h3 id="demo" tabindex="-1">Demo <a class="header-anchor" href="#demo" aria-label="Permalink to &quot;Demo&quot;">​</a></h3><p>Here is a small demo with the usage of this component:</p><div class="border border-solid border-gray-300 rounded-md shadow-md"><p><img src="`+p+`" alt="Demo of the sample Vue application"></p></div><h2 id="_9-subscribing-to-block-stream" tabindex="-1">9. Subscribing to Block Stream <a class="header-anchor" href="#_9-subscribing-to-block-stream" aria-label="Permalink to &quot;9. Subscribing to Block Stream&quot;">​</a></h2><p>You can use <a href="https://github.com/hyperledger/iroha/blob/iroha2-lts/docs/source/references/api_spec.md#blocks-stream" target="_blank" rel="noreferrer"><code>/block/stream</code> endpoint</a> to send a subscription request for block streaming.</p><p>Via this endpoint, the client first provides the starting block number (i.e. height) in the subscription request. After sending the confirmation message, the server starts streaming all the blocks from the given block number up to the current block, and continues to stream blocks as they are added to the blockchain.</p><p>Here is an example of how to listen to the block stream:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { Torii, ToriiRequirementsForApiWebSocket } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@iroha2/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">requirements</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ToriiRequirementsForApiWebSocket</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">stream</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> Torii.</span><span style="color:#DCBDFB;">listenForBlocksStream</span><span style="color:#ADBAC7;">(requirements, {</span></span>
<span class="line"><span style="color:#ADBAC7;">  height: </span><span style="color:#6CB6FF;">0</span><span style="color:#F47067;">n</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">stream.ee.</span><span style="color:#DCBDFB;">on</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;block&#39;</span><span style="color:#ADBAC7;">, (</span><span style="color:#F69D50;">block</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">height</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> block.enum.</span><span style="color:#DCBDFB;">as</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;V1&#39;</span><span style="color:#ADBAC7;">).header.height</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Got block with height&#39;</span><span style="color:#ADBAC7;">, height)</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span></code></pre></div><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>We have to pass environment-specific <code>ws</code> and <code>fetch</code>, because there is no way for Iroha Client to communicate with a peer in an environment-agnostic way. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,100),t=[e];function c(r,i,A,y,D,B){return n(),a("div",null,t)}const d=s(o,[["render",c]]);export{F as __pageData,d as default};
